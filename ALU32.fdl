dp ALU32(in A, B : tc(32);
		in sel : ns(2);
		out Z, N : ns(1);
			out R : tc(32))
{
// todo : Insert code here!
always{
	R=(sel==0b00)?A-B:
	(sel==0b01)?B-A:
	(sel==0b10)?A:
	(sel==0b11)?B: 111;
	Z = (R==0)?1:0;
	N = R[32];
}

}
dp testALU32(out A, B:tc(32);
			out sel : ns(2);
			in Z, N : ns(1);
			in R:tc(32))
{
always{
$display($dec, "Cycle:", $cycle, ", A=", A , ", B=", B ,", sel=", sel, ", R=", R, ", N=", N, ", Z=", Z);
}
sfg test_0 { A=3; B=6; sel=0b00; }
sfg test_1 { A=23; B=23; sel=0b01; }
sfg test_2 { A=12; B=0; sel=0b10; }
sfg test_3 { A=12; B=4; sel=0b11; }
} 
// note : State machine to control the mux testbench.
fsm f_testbench(testALU32)
{
initial s0; // begin with state s0
state s1, s2, s3; // other states are: s1, s2
@s0 (test_0) -> s1; // run test_0 and go to s1
@s1 (test_1) -> s2; // run test_1 and go to s2
@s2 (test_2) -> s3;
@s3 (test_3) -> s0;// run test_2 and go to s0
}

system myFirstSystem
{
ALU32(A, B, sel, R, N, Z);
testALU32(A, B, sel, R, N, Z);
}