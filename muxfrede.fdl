dp mux(in A, B : ns(32); in S : ns(1); out R : ns(32))
{
always {
	R = (S == 0 ) ? A : B;
}
}
dp testAdder(out A, B:tc(32);
	out S : ns(1);
	in R:tc(32))
{
	always{
		$display($dec, "Cycle:", $cycle, ", A=", A , ", B=", B , ", R=", R, "S= ", S);
	}
	sfg test_0 { A=3; B=6; S=0;}
	sfg test_1 { A=23; B=17; S=1;}
	sfg test_2 { A=12; B=0; S=0;}
}
// note : State machine to control the adder testbench.
fsm f_testbench(testAdder)
{
	initial s0;
	// begin with state s0
	state s1, s2;
	// other states are: s1, s2
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s0; // run test_2 and go to s0
}
system myFirstSystem
{
	mux(A, B, S, R);
	testAdder(A, B, S, R);
}
