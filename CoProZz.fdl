dp adder32(in A, B : ns(32);
			out R_add : ns(32))
{
always{
	R_add = A + B;
}
}

dp sub32(in C, D : ns(32);
			out R_sub : ns(32))
{
always{
	R_sub = C - D;
}
}

dp bullshit(in SUM_final : ns(32);
			out R_shift : ns(32))
{
always{
	R_shift = SUM_final >> 5;
}
}

dp registerchain32(in Sensordata : ns(32);
				   out R_reg : ns(32))
{
	reg r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, 
	r11, r12, r13, r14, r15, r16, r17, r18, r19,
	r20, r21, r22, r23, r24, r25, r26, r27, r28,
	r29, r30, r31, r32 : ns(32);
	always{
	r1 = Sensordata;
	r2 = r1;
	r3 = r2;
	r4 = r3; 
	r5 = r4;
	r6 = r5;
	r7 = r6;
	r8 = r7;
	r9 = r8;
	r10 = r9;
	r11 = r10;
	r12 = r11;
	r13 = r12;
	r14 = r13;
	r15 = r14;
	r16 = r15;
	r17 = r16;
	r18 = r17;
	r19 = r18;
	r20 = r19;
	r21 = r20;
	r22 = r21;
	r23 = r22;
	r24 = r23;
	r25 = r24;
	r26 = r25;
	r27 = r26;
	r28 = r27;
	r29 = r28;
	r30 = r29;
	r31 = r30;
	r32 = r31;	
	R_reg = r32;
	}
}

dp registersum(in In_sub : ns(32);
				out R_regsum : ns(32))
{
	reg r1 : ns(32);
	always{
	r1 = In_sub;
	R_regsum = r1;
	}
}


dp CoPro(in CMD_in, BS_out, DATA_in : ns(32);
		in CPen : ns(1);
		 out CMD_out : ns(32))
{
sig addA, addB, addOut, subOut, chainOut, BSOut  : ns(32);
use adder32(addA, addB, addOut);
use sub32(addOut, chainOut, subOut);
use bullshit(subOut, BSOut);
use registerchain32(addA, chainOut);
use registersum(subOut, addB);
	always{
	addA = DATA_in;
	CMD_out[31:16] = CMD_in[15:0];
	CMD_out[15:0] = BSOut[15:0];
	}
}

system hitler
{
	CoPro(testout);
}